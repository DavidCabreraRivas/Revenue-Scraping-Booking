#pip install webdriver_manager

from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager

driver = webdriver.Chrome(ChromeDriverManager().install())


import os
from time import sleep
from random import randint
import pandas as pd
from selenium import webdriver


from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.remote.webelement import WebElement


# Setup Chrome options
chrome_options = Options()
chrome_options.add_argument("--headless") # Ensure GUI is off
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-dev-shm-usage")

# Set path to chromedriver as per your configuration
webdriver_path = ChromeDriverManager().install()

# Choose Chrome Browser
driver = webdriver.Chrome(executable_path=webdriver_path, options=chrome_options)



class BookingFiltration:

    def __init__(self, driver: webdriver):
        self.driver = driver

    def sort_price_lowest_first(self):
        element = self.driver.find_element_by_css_selector('button[data-testid="sorters-dropdown-trigger"]')
        element.click()
        sleep(randint(1,2))
        element_price = self.driver.find_element_by_css_selector('button[data-id="price"]')
        element_price.click()
class BookingReport:
    
    def __init__(self, boxes_section_element: WebElement):
        self.boxes_section_element = boxes_section_element
        self.deal_boxes = self.pull_deal_boxes()

    def pull_deal_boxes(self):
        return self.boxes_section_element.find_elements_by_css_selector('div[data-testid="property-card"]')

    def pull_deal_box_attributes(self):
        collection = list()
        for deal_box in self.deal_boxes:
            hotel_name = deal_box.find_element_by_css_selector("div[data-testid='title']").get_attribute('innerHTML').strip()
            hotel_price = deal_box.find_element_by_css_selector('span[class="bui-u-sr-only"]').get_attribute('innerHTML').strip().replace('€&nbsp;', '')
            hotel_score = deal_box.find_element_by_css_selector("div[class='bui-review-score__badge']").get_attribute('innerHTML').strip()

            collection.append([hotel_name, hotel_price, hotel_score])

        return collection

class Booking(webdriver.Chrome):
    
    def __init__(self, driver_path=r"C:\Users\Usuario\Desktop\INNOVA GESTION HOTELERA\Scraping booking", teardown=False):
        self.driver_path = driver_path
        self.teardown = teardown
        os.environ['PATH'] += self.driver_path
        options = webdriver.ChromeOptions()
        options.add_experimental_option('excludeSwitches', ['enable-logging'])
        super(Booking, self).__init__(options=options)
        self.implicitly_wait(15)
        self.maximize_window()

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.teardown:
            self.quit()

    def land_first_page(self, BASE_URL):
        self.get(BASE_URL)

    def close_cookies(self):
        cookie_element = self.find_element_by_css_selector("button[class='bui-button bui-button--large']")
        cookie_element.click()

    def change_currency(self, currency=None):
        currency_element = self.find_element_by_css_selector('button[data-modal-id="currency_selector"]')
        currency_element.click()
        selected_currency_element = self.find_element_by_css_selector(f"a[data-modal-header-async-url-param*='selected_currency={currency}']")
        selected_currency_element.click()

    def select_place_to_go(self, place_to_go):
        search_field = self.find_element_by_id('ss')
        search_field.clear()
        search_field.send_keys(place_to_go)

    def select_dates(self, check_in_date, check_out_date):
        check_in_element = self.find_element_by_css_selector(f"td[data-date='{check_in_date}']")
        check_in_element.click()
        check_out_element = self.find_element_by_css_selector(f"td[data-date='{check_out_date}']")
        check_out_element.click()

    def select_adults(self, count=1):
        selection_element = self.find_element_by_id('xp__guests__toggle')
        selection_element.click()
        increase_button_element = self.find_element_by_css_selector('button[aria-label="Increase number of Adults"]')
        for _ in range(count - 1):
            increase_button_element.click()

    def click_search(self):
        search_button = self.find_element_by_css_selector('button[type="submit"]')
        search_button.click()

    def close_map(self):
        close_map_button = self.find_element_by_css_selector('div[aria-label="Close map"]')
        close_map_button.click()

    def apply_filtrations(self):
        filtration = BookingFiltration(driver=self)
        filtration.sort_price_lowest_first()

    def report_results(self):
        hotel_boxes = self.find_element_by_id("hotellist_inner")
        report = BookingReport(hotel_boxes)
        table = pd.DataFrame(
            report.pull_deal_box_attributes(),
            columns = ['Hotel Name', 'Hotel Price €', 'Hotel Score']
        )
        print(table)

BASE_URL = "https://www.booking.com"

try:
    with Booking(teardown=False) as bot:
        bot.land_first_page(BASE_URL)
        bot.close_cookies()
        bot.change_currency('EUR')
        bot.select_place_to_go('Puerto del Carmen')
        bot.select_dates(check_in_date='2023-07-30', check_out_date='2023-08-01')
        bot.select_adults(3)
        bot.click_search()
        bot.close_map()
        bot.apply_filtrations()
        bot.report_results()

except Exception as e:
    if 'in PATH' in str(e):
        print(
            'You are trying to run the bot from command line \n'
            'Please add to PATH your Selenium Drivers \n'
            'Windows: \n'
            'set PATH=%PATH%;C:/path-to-your-folder \n \n'
            'Linux: \n'
            'PATH=$PATH:/path/to/your/folder/ \n'
        )
    else:
        raise
